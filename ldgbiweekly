#!/usr/bin/env ruby

require 'date'
require 'yaml'
require 'cymbal'
require 'ballista'

CONFIG_FILE = 'biweekly.yml'.freeze
OUTPUT_FILE = 'biweekly.ldg'.freeze

def config
  @config ||= Cymbal.symbolize(YAML.load(File.read(CONFIG_FILE)))
end

def end_date
  @end_date ||= Date.new(Date.today.year + 1, 12)
end

def existing_content(file)
  return '' unless File.exist? file
  content = File.read(file).partition(header).first.rstrip
  return '' if content.empty?
  content + "\n\n"
end

def actions
  return @actions if @actions
  @actions ||= config.dup
  @actions.each do |x|
    x[:start] = Date.parse(x[:start])
    x[:proc] = proc { |y| (y - x[:start]) % 14) == 0 }
  end
end

def build_action(day, action)
  Ledger::Entry.new(
    name: action[:name],
    state: :pending,
    date: day,
    actions: action[:actions]
  )
end

def transactions
  Date.today.upto(end_date).each_with_object([]) do |day, array|
    actions.each do |action|
      array << build_action(day, action) if action[:proc].call(day)
    end
  end
end

def journal
  Ledger::Journal.new(entries: transactions)
end

def write!
  File.open(file, 'w') { |fh| fh << journal }
end

unless File.exist? CONFIG_FILE
  puts 'Run this from directory with journals and projections.yml'
  exit 1
end

write!
